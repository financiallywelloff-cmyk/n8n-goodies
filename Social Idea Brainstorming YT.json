{
  "name": "Social Idea Brainstorming - YT copy",
  "nodes": [
    {
      "parameters": {
        "public": true,
        "initialMessages": "Please enter the target keyword you want to search on Youtube. Thanks!",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chatTrigger",
      "typeVersion": 1.3,
      "position": [
        -16,
        16
      ],
      "id": "5f56427b-b305-406e-82d3-e8067919663d",
      "name": "When chat message received",
      "webhookId": "4544f6eb-0280-420e-8584-76bb03b38b8f"
    },
    {
      "parameters": {
        "operation": "Run actor",
        "actorId": {
          "__rl": true,
          "value": "h7sDV53CddomktSi5",
          "mode": "list",
          "cachedResultName": "YouTube Scraper",
          "cachedResultUrl": "https://console.apify.com/actors/h7sDV53CddomktSi5/input"
        },
        "customBody": "={\n    \"dateFilter\": \"month\",\n    \"downloadSubtitles\": true,\n    \"hasCC\": false,\n    \"hasLocation\": false,\n    \"hasSubtitles\": false,\n    \"is360\": false,\n    \"is3D\": false,\n    \"is4K\": false,\n    \"isBought\": false,\n    \"isHD\": false,\n    \"isHDR\": false,\n    \"isLive\": false,\n    \"isVR180\": false,\n    \"lengthFilter\": \"between420\",\n    \"maxResultStreams\": 0,\n    \"maxResults\": 10,\n    \"maxResultsShorts\": 0,\n    \"preferAutoGeneratedSubtitles\": false,\n    \"saveSubsToKVS\": false,\n    \"searchQueries\": [\n        \"{{ $json.keyword }}\"\n    ],\n    \"sortingOrder\": \"views\",\n    \"videoType\": \"video\"\n}",
        "authentication": "apifyOAuth2Api"
      },
      "type": "@apify/n8n-nodes-apify.apify",
      "typeVersion": 1,
      "position": [
        336,
        16
      ],
      "id": "282aa0bb-5dc4-419b-82bb-7585c31cb4e9",
      "name": "Run an Actor",
      "credentials": {
        "apifyOAuth2Api": {
          "id": "pd61neSkmcU8nZBd",
          "name": "Apify account 2"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "93b8f388-2d40-49ce-b56e-e109c951b817",
              "name": "keyword",
              "value": "={{ $json.chatInput }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        160,
        16
      ],
      "id": "6e2e019f-e466-44a7-a02c-ded37e036a26",
      "name": "Edit Fields"
    },
    {
      "parameters": {
        "resource": "Datasets",
        "operation": "Get items",
        "datasetId": "={{ $json.defaultDatasetId }}",
        "authentication": "apifyOAuth2Api"
      },
      "type": "@apify/n8n-nodes-apify.apify",
      "typeVersion": 1,
      "position": [
        1168,
        -16
      ],
      "id": "e7029e7b-4e28-4ff1-ba08-ceb66973108f",
      "name": "Get dataset items"
    },
    {
      "parameters": {
        "amount": 60
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        512,
        16
      ],
      "id": "ec46521f-8cc7-4524-b2de-b64ec84af1ed",
      "name": "Wait",
      "webhookId": "82b9c5e6-dd9c-45f0-ac6b-4a3f8d77a193"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [
        304,
        448
      ],
      "id": "49b5e27f-507a-487a-aa0f-5814fda3c1c9",
      "name": "OpenRouter Chat Model",
      "credentials": {
        "openRouterApi": {
          "id": "1zlkqUsNWmcHuYkM",
          "name": "OpenRouter account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Analyze these YouTube results for solopreneurs who want simple automation (n8n/AI/no-code) without technical overwhelm.\n\nData (pipe-separated; one per line):\n\n{{ $json.text }}\n\nDo the following:\n\nSelect up to 8 headlines that best fit the audience/problem and show meaningful engagement or outlier behavior vs channel size. Skip items that are off-brand or overly technical without a clear time-saving payoff.\n\nFor each selected headline, give a 1–2 sentence explanation of why it resonates (clarity of promise, time-saving payoff, specificity, novelty, social proof, status-by-skill).\n\nFor each selected headline, generate 5 headline angles with a one-line rationale focused on time saved, low complexity, and repeatable systems.\n\nConstraints:\n\nKeep language plain and non-technical.\n\nTreat unknown metrics as null; don’t guess.\n\nStay close to what already works; don’t drift into unrelated topics.",
        "hasOutputParser": true,
        "messages": {
          "messageValues": [
            {
              "type": "=SystemMessagePromptTemplate",
              "message": "=You are a social media strategist for solopreneurs and creators who want time-saving automation without technical overwhelm. The operator is a solopreneur building a SaaS who automates with n8n, AI, and no-code, and shares practical systems and thought process. They are the bridge for non-technical folks: capable, fast, but not interested in deep, code-heavy builds.\n\nOperate by these rules:\n\nRelevance first: prioritize topics that automate repetitive business/content tasks, save time, and reduce complexity. Favor n8n/AI/no-code systems, templates, and repeatable workflows.\n\nComplexity filter: avoid highly technical, code-from-scratch or expert-only content unless the payoff is exceptional and can be explained simply.\n\nSelection cap: choose up to 8 headlines per run. Skip off-brand items even if they have high views.\n\nAngles per pick: produce exactly 5 angles per selected headline, each with a one-line rationale tied to time saved, low complexity, and practical outcomes.\n\nBaseline signals: use provided metrics (views, subscribers, likes, comments, views_per_day, view_sub_ratio, like_rate, comment_rate, publish_date if present). Prefer higher views_per_day and view_sub_ratio for small/medium channels.\n\nNo fabrication: if a metric is missing, note it briefly and proceed using judgment.\n\nTone: plain, actionable, non-technical. No how-to steps, no tool fanboying."
            }
          ]
        },
        "batching": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.7,
      "position": [
        304,
        272
      ],
      "id": "28393e0d-48b7-4a53-8096-599c4bb4af2e",
      "name": "Brainstorm New Angles"
    },
    {
      "parameters": {
        "resource": "Actor runs",
        "operation": "Get run",
        "runId": {
          "__rl": true,
          "value": "={{ $('Run an Actor').item.json.id }}",
          "mode": "id"
        },
        "authentication": "apifyOAuth2Api"
      },
      "type": "@apify/n8n-nodes-apify.apify",
      "typeVersion": 1,
      "position": [
        672,
        16
      ],
      "id": "ddbefd24-0639-4290-8645-6f8bbdd0d775",
      "name": "Get run"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.status }}",
                    "rightValue": "SUCCEEDED",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "83265c32-702b-4286-9935-32f762f1d63b"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "SUCCEEDED"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "7f0d38b0-4dba-4e0b-97a9-9e67f99bc6a1",
                    "leftValue": "={{ $json.statusMessage }}",
                    "rightValue": "No results",
                    "operator": {
                      "type": "string",
                      "operation": "startsWith"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Stop"
            }
          ]
        },
        "options": {
          "fallbackOutput": "extra",
          "renameFallbackOutput": "Rendering"
        }
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        848,
        0
      ],
      "id": "3b092854-a649-42ad-98b2-1b506339e18b",
      "name": "Switch"
    },
    {
      "parameters": {
        "jsCode": "// n8n Code node — Run once for all items\n// Choosy version: smarter gating by age, velocity, and channel size\n\nconst CONFIG = {\n  DATASET_NODE: 'Get dataset items',\n  URL_FIELD: 'URL',\n\n  // Base hygiene\n  ENGLISH_ONLY: true,\n  NON_LATIN_RATIO_MAX: 0.25,\n  EXCLUDE_SHORTS: true,\n  RECENT_DAYS: 30,\n  MAX_ITEMS: 500,\n\n  // Baselines (keep these mild; real gating happens later)\n  MIN_SUBS: 1000,\n  MIN_VIEWS: 1000,\n\n  // Outlier signal (kept for the flag + score)\n  RATIO_HARD: 5.0,\n\n  // NEW: choosy thresholds\n  NEW_DAYS: 7,               // “fresh” window\n  MIN_VIEWS_NEW: 5000,       // fresh absolute floor OR…\n  MIN_VPD_NEW: 400,          // …fresh velocity floor (views/day)\n  MIN_VPD_OLD: 120,          // older items need at least this velocity\n  MIN_VSR_BASE: 0.03,        // base views/sub ratio gate for all\n  BIG_CH_SUBS: 200000,       // channels above this are inflation-prone\n  BIG_CH_VPD_PCNT: 0.70,     // big channels must be >= 70th pct in velocity OR…\n  BIG_CH_VSR_MIN: 0.08,      // …have at least 8% views/sub ratio\n  ABS_VIEW_KEEP: 20000,      // or brute-force keep if views exceed this\n  TOP_K: 20                  // cap final output\n};\n\n// ---------- helpers ----------\nconst safeNum = v => Number.isFinite(+v) ? +v : 0;\n\nfunction normalizeUrl(u) {\n  if (!u) return '';\n  const s = String(u).trim();\n  try {\n    const url = new URL(s);\n    url.searchParams.delete('t');\n    url.searchParams.delete('time_continue');\n    const params = [...url.searchParams.entries()].sort((a,b)=>a[0].localeCompare(b[0]));\n    url.search = new URLSearchParams(params).toString();\n    return url.toString().toLowerCase();\n  } catch {\n    return s.toLowerCase().replace(/([&?])t=\\d+s?/,'$1');\n  }\n}\n\nfunction isLikelyEnglish(text='') {\n  const latin = (text.match(/[A-Za-z]/g) || []).length;\n  const nonLatin = (text.match(/[^A-Za-z0-9\\s.,!?'\"’“”\\-:;()]/g) || []).length;\n  const len = text.length || 1;\n  const latinRatio = latin / len;\n  const nonLatinRatio = nonLatin / len;\n  return latinRatio >= 0.15 && nonLatinRatio <= CONFIG.NON_LATIN_RATIO_MAX;\n}\n\nfunction parseISOorDate(s) {\n  if (!s) return null;\n  const d = new Date(s);\n  return Number.isNaN(d.getTime()) ? null : d;\n}\n\nfunction daysBetweenUTC(d1, d2) {\n  const ms = Date.UTC(d2.getUTCFullYear(), d2.getUTCMonth(), d2.getUTCDate())\n           - Date.UTC(d1.getUTCFullYear(), d1.getUTCMonth(), d1.getUTCDate());\n  return Math.max(1, Math.round(ms / 86400000));\n}\n\nfunction parseDurationSec(x) {\n  if (x == null) return 0;\n  if (typeof x === 'number' && Number.isFinite(x)) return x;\n  const s = String(x).trim();\n  if (s.startsWith('PT')) {\n    let h=0,m=0,se=0;\n    const H = s.match(/(\\d+)H/); if (H) h=+H[1];\n    const M = s.match(/(\\d+)M/); if (M) m=+M[1];\n    const S = s.match(/(\\d+)S/); if (S) se=+S[1];\n    return h*3600 + m*60 + se;\n  }\n  if (s.includes(':')) {\n    const p = s.split(':').map(Number);\n    if (p.length === 3) return p[0]*3600 + p[1]*60 + p[2];\n    if (p.length === 2) return p[0]*60 + p[1];\n  }\n  const n = +s;\n  return Number.isFinite(n) ? n : 0;\n}\n\nconst stopwords = new Set([\n  'the','a','an','and','or','to','for','with','in','on','of','how','what','why','when',\n  'you','your','my','from','is','are','this','that','guide','tutorial','workflow','automate','automation'\n]);\n\nfunction topicKey(title='') {\n  return title\n    .toLowerCase()\n    .replace(/[^a-z0-9+\\-_\\s]/g, ' ')\n    .split(/\\s+/)\n    .filter(t => t && !stopwords.has(t))\n    .join(' ')\n    .trim();\n}\n\nconst pctRankFrom = arr => {\n  const sorted = [...arr].filter(n=>Number.isFinite(n)).sort((a,b)=>a-b);\n  const n = sorted.length || 1;\n  return v => {\n    let lo=0, hi=n;\n    while (lo<hi) {\n      const mid=(lo+hi)>>1;\n      if (sorted[mid] <= v) lo=mid+1; else hi=mid;\n    }\n    return n===1 ? 1 : lo/(n-1);\n  };\n};\n\n// ---------- load inputs ----------\nconst notionItems = $input.all();\nconst apifyItems  = $(CONFIG.DATASET_NODE).all();\n\n// ---------- build Notion dupe set ----------\nconst notionUrlSet = new Set(\n  notionItems\n    .map(x => x?.json?.[CONFIG.URL_FIELD] ?? x?.json?.url ?? x?.json?.Url)\n    .filter(Boolean)\n    .map(normalizeUrl)\n);\n\n// ---------- normalize dataset, drop dupes first ----------\nconst now = new Date();\nlet rows = apifyItems.slice(0, CONFIG.MAX_ITEMS).map(({ json: v }) => {\n  const publish = parseISOorDate(v.publishDate || v.publishedAt || v.uploadDate || v.date) || null;\n  const durationSec = parseDurationSec(v.durationSec || v.duration);\n  const subs = safeNum(v.numberOfSubscribers);\n  const views = safeNum(v.viewCount);\n  const likes = safeNum(v.likes);\n  const comments = safeNum(v.commentsCount);\n\n  const ageDays = v.ageDays ? safeNum(v.ageDays) : (publish ? daysBetweenUTC(publish, now) : 9999);\n  const vpd = views / Math.max(1, ageDays);\n  const vsr = views / Math.max(1, subs);\n\n  return {\n    url: v.url,\n    id: v.id,\n    title: v.title,\n    channelName: v.channelName,\n    publishDate: publish ? publish.toISOString() : null,\n    durationSec,\n    viewCount: views,\n    likes,\n    commentsCount: comments,\n    numberOfSubscribers: subs,\n    ageDays,\n    viewsPerDay: vpd,\n    viewSubRatio: vsr,\n    likeRate: likes / Math.max(1, views),\n    commentRate: comments / Math.max(1, views),\n    isShort: (typeof v.isShort === 'boolean') ? v.isShort : durationSec < 61,\n    isRecent: publish ? (daysBetweenUTC(publish, now) <= CONFIG.RECENT_DAYS) : false,\n    topic_key: topicKey(v.title || '')\n  };\n});\n\n// early URL dedupe\nrows = rows.filter(r => !notionUrlSet.has(normalizeUrl(r.url)));\n\n// ---------- light hygiene filters ----------\nlet kept = rows.filter(r => {\n  if (CONFIG.EXCLUDE_SHORTS && r.isShort) return false;\n  if (r.numberOfSubscribers < CONFIG.MIN_SUBS) return false;\n  if (r.viewCount < CONFIG.MIN_VIEWS) return false;\n  if (CONFIG.RECENT_DAYS && r.publishDate && !r.isRecent) return false;\n  if (CONFIG.ENGLISH_ONLY && !isLikelyEnglish(r.title)) return false;\n  return true;\n});\nif (!kept.length) kept = rows;\n\n// ---------- scoring + outlier ----------\nconst prVPD_all = pctRankFrom(kept.map(r => r.viewsPerDay));\nconst prER_all  = pctRankFrom(kept.map(r => r.likeRate + r.commentRate));\nfor (const r of kept) {\n  const norm_vpd = prVPD_all(r.viewsPerDay);\n  const norm_vsr = Math.min(1, r.viewSubRatio / 10);\n  const norm_er  = prER_all(r.likeRate + r.commentRate);\n\n  r.score = 0.5*norm_vpd + 0.4*norm_vsr + 0.1*norm_er;\n\n  const smallMid = r.numberOfSubscribers >= 1000 && r.numberOfSubscribers <= 100000;\n  r.outlier =\n    (r.viewSubRatio >= CONFIG.RATIO_HARD) ||\n    (norm_vpd >= 0.9 && r.viewSubRatio >= 3) ||\n    (smallMid && r.viewCount >= 20000 && r.viewSubRatio >= 5);\n}\n\n// ---------- NEW: choosy gating ----------\nconst prVPD = pctRankFrom(kept.map(r => r.viewsPerDay)); // recompute for gate clarity\n\nkept = kept.filter(r => {\n  const fresh = r.ageDays <= CONFIG.NEW_DAYS;\n  const bigCh = r.numberOfSubscribers >= CONFIG.BIG_CH_SUBS;\n\n  // Base relevance: must clear a minimal views/sub floor\n  if (r.viewSubRatio < CONFIG.MIN_VSR_BASE) return false;\n\n  if (fresh) {\n    // Fresh: either strong absolute views or strong velocity\n    if (r.viewCount >= CONFIG.MIN_VIEWS_NEW) return true;\n    if (r.viewsPerDay >= CONFIG.MIN_VPD_NEW) return true;\n    return false;\n  } else {\n    // Older: require modest velocity\n    if (r.viewsPerDay < CONFIG.MIN_VPD_OLD) return false;\n  }\n\n  // Big channels: prevent inflation unless they’re truly moving\n  if (bigCh) {\n    const vpdPct = prVPD(r.viewsPerDay);\n    if (vpdPct >= CONFIG.BIG_CH_VPD_PCNT) return true;\n    if (r.viewSubRatio >= CONFIG.BIG_CH_VSR_MIN) return true;\n    if (r.viewCount >= CONFIG.ABS_VIEW_KEEP) return true;\n    return false;\n  }\n\n  return true;\n});\n\n// ---------- dedupe by topic, sort, cap ----------\nconst bestByTopic = new Map();\nfor (const r of kept) {\n  const k = r.topic_key || r.title?.toLowerCase() || r.id;\n  const prev = bestByTopic.get(k);\n  if (!prev || r.score > prev.score) bestByTopic.set(k, r);\n}\nlet deduped = [...bestByTopic.values()].sort((a,b)=>b.score - a.score);\nif (CONFIG.TOP_K && deduped.length > CONFIG.TOP_K) deduped = deduped.slice(0, CONFIG.TOP_K);\n\n// ---------- format one text block ----------\nfunction fmt(n, d=2) { return Number.isFinite(n) ? (+n).toFixed(d) : '0.00'; }\n\nconst lines = deduped.map(r => [\n  `Title: ${r.title || ''}`,\n  `URL: ${r.url || ''}`,\n  `Channel: ${r.channelName || ''}`,\n  `PublishDate: ${r.publishDate || 'null'}`,\n  `Subscribers: ${r.numberOfSubscribers || 0}`,\n  `Views: ${r.viewCount || 0}`,\n  `Likes: ${r.likes || 0}`,\n  `Comments: ${r.commentsCount || 0}`,\n  `ViewsPerDay: ${fmt(r.viewsPerDay)}`,\n  `ViewSubRatio: ${fmt(r.viewSubRatio)}`,\n  `LikeRate: ${fmt(r.likeRate,4)}`,\n  `CommentRate: ${fmt(r.commentRate,4)}`,\n  `Outlier: ${r.outlier ? 'true' : 'false'}`,\n  `Score: ${fmt(r.score,4)}`,\n  `Topic: ${r.topic_key || ''}`\n].join(' | '));\n\nconst textBlock = lines.join('\\n\\n');\n\nreturn [{ json: { text: textBlock } }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        144,
        272
      ],
      "id": "59fed1d4-a8df-49cf-a02c-efa17510bb5c",
      "name": "Organize YT Metadata"
    },
    {
      "parameters": {
        "jsonSchemaExample": "[\n  {\n    \"source\": \"YouTube\",\n    \"url\": \"https://www.youtube.com/watch?v=EXAMPLE\",\n    \"title\": \"Original headline from dataset\",\n    \"topic\": \"short theme or tool (e.g., n8n content planner)\",\n    \"angles\": [\n      { \"headline\": \"Angle #1\", \"why\": \"One line on time saved / simplicity / repeatability\" },\n      { \"headline\": \"Angle #2\", \"why\": \"…\" },\n      { \"headline\": \"Angle #3\", \"why\": \"…\" },\n      { \"headline\": \"Angle #4\", \"why\": \"…\" },\n      { \"headline\": \"Angle #5\", \"why\": \"…\" }\n    ]\n  }\n]\n"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.3,
      "position": [
        448,
        448
      ],
      "id": "198275aa-ffff-4529-b42e-53331f70f8f4",
      "name": "Structured Output Parser"
    },
    {
      "parameters": {
        "resource": "databasePage",
        "operation": "getAll",
        "databaseId": {
          "__rl": true,
          "value": "28a878bb-48fc-804e-bb51-c12e0e3188b4",
          "mode": "list",
          "cachedResultName": "Idea Base",
          "cachedResultUrl": "https://www.notion.so/28a878bb48fc804ebb51c12e0e3188b4"
        },
        "returnAll": true,
        "options": {}
      },
      "type": "n8n-nodes-base.notion",
      "typeVersion": 2.2,
      "position": [
        -16,
        272
      ],
      "id": "a3cf392e-3820-498f-b12c-fd5970914b32",
      "name": "Pull Current Urls",
      "credentials": {
        "notionApi": {
          "id": "eKjIulrNW1FU5YiX",
          "name": "Notion account"
        }
      }
    },
    {
      "parameters": {
        "content": "1. Input target keyword\n2. Check db for dups\n3. Organized youtube metadata\n4. Feed to LLM to generate new angles per niche",
        "height": 384
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -320,
        16
      ],
      "typeVersion": 1,
      "id": "42b0ff0e-75e4-4722-ae28-88da218e433d",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "resource": "databasePage",
        "databaseId": {
          "__rl": true,
          "value": "28a878bb-48fc-804e-bb51-c12e0e3188b4",
          "mode": "list",
          "cachedResultName": "Idea Base",
          "cachedResultUrl": "https://www.notion.so/28a878bb48fc804ebb51c12e0e3188b4"
        },
        "propertiesUi": {
          "propertyValues": [
            {
              "key": "Source|select",
              "selectValue": "Youtube"
            },
            {
              "key": "Status|select",
              "selectValue": "Pending"
            },
            {
              "key": "Title|rich_text",
              "textContent": "={{ $json.title }}"
            },
            {
              "key": "URL|url",
              "urlValue": "={{ $json.url }}"
            },
            {
              "key": "Angles|title",
              "title": "={{ $json.topic }}"
            }
          ]
        },
        "blockUi": {
          "blockValues": [
            {
              "textContent": "={{ $json.angles_text }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.notion",
      "typeVersion": 2.2,
      "position": [
        896,
        272
      ],
      "id": "64badcd6-c3bf-4b4f-a8d6-4e7f1279cd06",
      "name": "Create a database page"
    },
    {
      "parameters": {
        "jsCode": "// n8n Code node — Run once for all items\n// Input shape examples:\n// 1) [{ json: { output: [ {source, url, title, topic, angles:[{headline,why},...]}, ... ] } }]\n// 2) [{ json: { source, url, title, topic, angles:[...] } }, ...]  // fallback\n\nfunction toAnglesText(angles) {\n  if (!Array.isArray(angles)) return '';\n  return angles\n    .map((a, i) => `${i + 1}. ${a.headline}\\n   - ${a.why}`)\n    .join('\\n\\n');\n}\n\nconst out = [];\n\nfor (const item of $input.all()) {\n  const payload = item.json;\n\n  // Case 1: single item holding { output: [...] }\n  if (Array.isArray(payload.output)) {\n    for (const src of payload.output) {\n      out.push({\n        json: {\n          source: src.source || 'YouTube',\n          url: src.url || '',\n          title: src.title || '',\n          topic: src.topic || '',\n          // collapsed angles for a single Notion \"Angles\" field\n          angles_text: toAnglesText(src.angles),\n          // optional: same data as a compact JSON string if you prefer storing raw\n          angles_json: JSON.stringify(src.angles || [])\n        }\n      });\n    }\n    continue;\n  }\n\n  // Case 2: items already come as individual sources\n  if (payload && payload.title && Array.isArray(payload.angles)) {\n    out.push({\n      json: {\n        source: payload.source || 'YouTube',\n        url: payload.url || '',\n        title: payload.title || '',\n        topic: payload.topic || '',\n        angles_text: toAnglesText(payload.angles),\n        angles_json: JSON.stringify(payload.angles || [])\n      }\n    });\n  }\n}\n\nreturn out.length ? out : [{ json: { error: 'No valid items in LLM output' } }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        576,
        272
      ],
      "id": "ba504666-5a99-4cfd-a955-db4f553a6341",
      "name": "Code"
    },
    {
      "parameters": {
        "fieldToSplitOut": "angles_text",
        "include": "allOtherFields",
        "options": {}
      },
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        736,
        272
      ],
      "id": "5b9fb1b6-3d03-4b8e-b612-1081e6f47e01",
      "name": "Split Out"
    },
    {
      "parameters": {
        "errorMessage": "No results were found!"
      },
      "type": "n8n-nodes-base.stopAndError",
      "typeVersion": 1,
      "position": [
        1040,
        16
      ],
      "id": "53af4edd-38f0-4fff-b95a-bb7bd34194ef",
      "name": "Stop and Error"
    }
  ],
  "pinData": {},
  "connections": {
    "When chat message received": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "Run an Actor",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Run an Actor": {
      "main": [
        [
          {
            "node": "Wait",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get dataset items": {
      "main": [
        [
          {
            "node": "Pull Current Urls",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait": {
      "main": [
        [
          {
            "node": "Get run",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenRouter Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Brainstorm New Angles",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Get run": {
      "main": [
        [
          {
            "node": "Switch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch": {
      "main": [
        [
          {
            "node": "Get dataset items",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Stop and Error",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Wait",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Organize YT Metadata": {
      "main": [
        [
          {
            "node": "Brainstorm New Angles",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser": {
      "ai_outputParser": [
        [
          {
            "node": "Brainstorm New Angles",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Brainstorm New Angles": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Pull Current Urls": {
      "main": [
        [
          {
            "node": "Organize YT Metadata",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Split Out",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Out": {
      "main": [
        [
          {
            "node": "Create a database page",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "779069e3-ec97-4fd0-8206-cc05ffeedba7",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "68e406d0a2a75a49849ce975ae0e3834ad8f5b143f048d638dfae31b6de030fc"
  },
  "id": "2RI8yvKdkHbJnjhn",
  "tags": []
}